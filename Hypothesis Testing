import numpy as np
#Let's start by including a data interface called fetchmaker that will give you access to FetchMaker's dog data.
#Use import fetchmaker at the top of your script.py file to import the fetchmaker package.
import fetchmaker

#The attributes that FetchMaker keeps track of are:
#-weight, an integer representing how heavy a dog is in pounds
#-tail_length, a float representing tail length in inches
#-age, in years
#-color, a String such as "brown" or "grey"
#-is_rescue, a boolean 0 or 1
#The fetchmaker package lets you access this data for a specific breed of dog with the following format:
#fetchmaker.get_weight("poodle")
#This returns a Pandas DataFrame of the weights of the poodles recorded in the system. The other methods are get_tail_length, get_color, get_age, and get_is_rescue, which all take a breed as an input.
#Get the tail lengths of all of the "rottweiler"s in the system, and store it in a variable called rottweiler_tl.
rottweiler_tl = fetchmaker.get_weight("rottweiler")
print rottweiler_tl.mean()
print rottweiler_tl.std()
#mean = 55.16
#standard deviation = 8.92360392839

#Over the years, we have seen that we expect 8% of dogs in the FetchMaker system to be rescues. We want to know if whippets are significantly more or less likely to be a rescue.
#Store the is_rescue values for "whippet"s in a variable called whippet_rescue.
whippet_rescue = fetchmaker.get_is_rescue("whippet")


#Use np.count_nonzero to get the number of entries in whippet_rescue that are 1. Store this number in a variable called num_whippet_rescues.
num_whippet_rescues = np.count_nonzero(whippet_rescue)

#Get the number of samples in the whippet set by taking the np.size of whippet_rescue. Store this in a variable called num_whippets.
num_whippets = np.size(whippet_rescue)
print num_whippets

#Use a binomial test to test the number of whippet rescues, num_whippet_rescues, against our expected percentage, 8%.
#Remember to import the binomial test by using from scipy.stats import binom_test
from scipy.stats import binom_test
pval = binom_test(6, n=100, p=0.08)
print pval
#pvalue = 0.581178010624
#not signifcant 

#Three of our most popular mid-sized dog breeds are whippets, terriers, and pitbulls. Is there a significant difference in the average weights of these three dog breeds? Perform a comparative numerical test to determine if there is a significant difference.
from scipy.stats import f_oneway
whippet_weight = fetchmaker.get_weight("whippet")
terrier_weight = fetchmaker.get_weight("terrier")
pitbull_weight = fetchmaker.get_weight("pitbull")
f, fpval = f_oneway(whippet_weight, terrier_weight, pitbull_weight)
print fpval
#pvalue from ANOVA = 3.27641558827e-17
#is signifcant 

#Now, perform another test to determine which of the pairs of these dog breeds differ from each other.
from statsmodels.stats.multicomp import pairwise_tukeyhsd

weights_aggregated = np.concatenate([whippet_weight, terrier_weight, pitbull_weight])
labels = ['whippet'] * len(whippet_weight) + ['terrier'] * len(terrier_weight) + ['pitbull'] * len(pitbull_weight)
tukey_result = pairwise_tukeyhsd(weights_aggregated, labels, 0.05)
print tukey_result

#Multiple Comparison of Means - Tukey HSD,FWER=0.05
#==============================================
# group1  group2 meandiff  lower  upper  reject
#----------------------------------------------
#pitbull terrier  -13.24  -16.728 -9.752  True 
#pitbull whippet  -3.34    -6.828 0.148  False 
#terrier whippet   9.9     6.412  13.388  True 
#----------------------------------------------

#We want to see if "poodle"s and "shihtzu"s have significantly different color breakdowns.
#Get the poodle colors and store it in a variable called poodle_colors.
#Get the shih tzu colors and store it in a variable called shihtzu_colors.
poodle_colors = fetchmaker.get_color("poodle")
shihtzu_colors = fetchmaker.get_color("shihtzu")


#You can get the number of occurrences of brown poodles by using np.count_nonzero(poodle_colors == "brown").
#Use this function to build a Chi Square contingency table, called color_table, with the following structure:
#______Poodle +	Shih Tzu
#Black|	  x	  |   x
#Brown|   x	  |   x
#Gold |	  x	  |   x
#Grey	|   x	  |   x
#White|	  x	  |   x
#Fill in the "x" entries with the number of each poodle or shih tzu with the specified color.
black_poodle = np.count_nonzero(poodle_colors == "black")
brown_poodle = np.count_nonzero(poodle_colors == "brown")
gold_poodle = np.count_nonzero(poodle_colors == "gold")
grey_poodle = np.count_nonzero(poodle_colors == "grey")
white_poodle = np.count_nonzero(poodle_colors == "white")
black_shihtzu = np.count_nonzero(shihtzu_colors == "black")
brown_shihtzu = np.count_nonzero(shihtzu_colors == "brown")
gold_shihtzu = np.count_nonzero(shihtzu_colors == "gold")
grey_shihtzu = np.count_nonzero(shihtzu_colors == "grey")
white_shihtzu = np.count_nonzero(shihtzu_colors == "white")

color_table = [ [black_poodle, black_shihtzu],
                [brown_poodle, brown_shihtzu],
                [gold_poodle, gold_shihtzu],
                [grey_poodle, grey_shihtzu],
              	[white_poodle, white_shihtzu] ]
print color_table 
#[[17, 10], [13, 36], [8, 6], [52, 41], [10, 7]]

#Feed your color_table into SciPy's Chi Square test, save the p-value and print it out.
#Is there a significant difference?
from scipy.stats import chi2_contingency
chi2, pval, dof, expected = chi2_contingency(color_table)
print pval
#pvalue = 0.00530240829324
